# This is a basic workflow that is manually triggered

name: Manual workflow



env:
  # find out this value by opening https://api.github.com/repos/<owner>/<repo>/releases
  # in your browser and copy the full "upload_url" value including the {?name,label} part
  UPLOAD_URL: https://uploads.github.com/repos/PPAC37/li3d.fr-forum-glossaire/releases/87541384/assets{?name,label}
  RELEASE_ID: 87541384 # same as above (id can just be taken out the upload_url, it's used to find old releases)



# Controls when the action will run. Workflow runs when manually triggered using the UI
# or API.
on:
  workflow_dispatch:
    # Inputs the workflow accepts.
#    inputs:
#      name:
#        # Friendly description to be shown in the UI instead of 'name'
#        description: 'Person to greet'
#        # Default value if no value is explicitly provided
#        default: 'World'
#        # Input has to be provided for the workflow to run
#        required: true

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "greet"
  greet:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
    # récupérer le depot
    - uses: actions/checkout@v3
    # installer un environnement java
    - uses: actions/setup-java@v2
      with:
        distribution: 'temurin'
        java-version: '17'
        cache: 'maven'
    # compiler les sources du projet maven (Java) pour obtenir le fichier jar executable
    - name: Package with Maven
      run: mvn -B clean package -DskipTests
    # Runs a single command using the runners shell
    - name: run java jar
      shell: bash
      run:  |
         java -jar target/li3dfrGlossaire*-with-dependencies.jar 
#        java -jar target/li3dfrGlossaire*-with-dependencies.jar &&
#        echo "Hello ${{ github.event.inputs.name }}"
    # Mettre a disposition le fichier indexComment.html resultant de l'execution précédante
    - name: Deploy universal release A
      if: github.repository == 'PPAC37/li3d.fr-forum-glossaire' && github.ref == 'refs/heads/main'
      uses: WebFreak001/deploy-nightly@v1.1.0
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # automatically provided by github actions
      with:
        upload_url: ${{ env.UPLOAD_URL }}
        release_id: ${{ env.RELEASE_ID }}{
        asset_path: indexComment.html # path to archive to upload
        asset_name: li3dfrGlossaire-Sommaire-$$.html # name to upload the release as, use $$ to insert date (YYYYMMDD) and 6 letter commit hash
        asset_content_type: text/html;charset=UTF-8 # required by GitHub API
        max_releases: 1 # optional, if there are more releases than this matching the asset_name, the oldest ones are going to be deleted
    # Mettre a disposition le fichier indexComment.html resultant de l'execution précédante
    - name: Deploy universal release B
      if: github.repository == 'PPAC37/li3d.fr-forum-glossaire' && github.ref == 'refs/heads/main'
      uses: WebFreak001/deploy-nightly@v1.1.0
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # automatically provided by github actions
      with:
        upload_url: ${{ env.UPLOAD_URL }}
        release_id: ${{ env.RELEASE_ID }}{
        asset_path: indexSommaireEtComment.html # path to archive to upload
        asset_name: li3dfrGlossaire-SommaireEtDéfinition-$$.html # name to upload the release as, use $$ to insert date (YYYYMMDD) and 6 letter commit hash
        asset_content_type: text/html;charset=UTF-8 # required by GitHub API
        max_releases: 1 # optional, if there are more releases than this matching the asset_name, the oldest ones are going to be deleted

